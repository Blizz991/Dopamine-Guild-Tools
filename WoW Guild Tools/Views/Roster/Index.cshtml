@model IEnumerable<WoW_Guild_Tools.Models.Raider>

@{ ViewData["Title"] = "Roster"; }

@*<h1>Roster</h1>*@
<section class="roster">
    <section class="roster__characters">
        @{ await Html.RenderPartialAsync("Partials/_MainRaidersTable");
            await Html.RenderPartialAsync("Partials/_AltRaidersTable");
        }
    </section>
    <section class="roster__overview">
        <article class="roster__spec-overviews">
            <header class="roster__header">
                <h2 class="roster__title">Overview</h2>
            </header>
            <article class="roster__spec-tables">
                @* TODO?: Extract to partial view(s) *@
                <table class="table">
                    <thead class="not-sticky">
                        <tr>
                            <th class="bold">Tanks</th>
                            <th>Mains</th>
                            <th>Alts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var tanks = Model.Where(r => r.Role == WowSpecRole.Tank)
                                                          .GroupBy(r => r.Class)
                                                          .OrderBy(group => group.Key)
                                                          .Select(group => new
                                                          {
                                                              WowClass = group.Key,
                                                              MainCount = group.Count(r => r.MainId == null),
                                                              AltCount = group.Count(r => r.MainId != null)
                                                          }); }
                        @foreach (var tankClass in tanks)
                        {
            <tr>
                <td class="@tankClass.WowClass.ToString().ToWowClassCssClass()">@Html.DisplayFor(modelItem => tankClass.WowClass)s</td>
                <td>@tankClass.MainCount</td>
                <td>@tankClass.AltCount</td>
            </tr>
}
                    </tbody>
                    <tfoot>
                        <tr class="bold">
                            <td>Total: </td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Tank && r.IsAlt == false).Count()</td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Tank && r.IsAlt == true).Count()</td>
                        </tr>
                    </tfoot>
                </table>
                <table class="table">
                    <thead class="not-sticky">
                        <tr>
                            <th class="bold">Tanks</th>
                            <th>Mains</th>
                            <th>Alts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var healers = Model.Where(r => r.Role == WowSpecRole.Healer)
                                                          .GroupBy(r => r.Class)
                                                          .OrderBy(group => group.Key)
                                                          .Select(group => new
                                                          {
                                                              WowClass = group.Key,
                                                              MainCount = group.Count(r => r.MainId == null),
                                                              AltCount = group.Count(r => r.MainId != null)
                                                          }); }
                        @foreach (var healerClass in healers)
                        {
            <tr>
                <td class="@healerClass.WowClass.ToString().ToWowClassCssClass()">@Html.DisplayFor(modelItem => healerClass.WowClass)s</td>
                <td>@healerClass.MainCount</td>
                <td>@healerClass.AltCount</td>
            </tr>}
                    </tbody>
                    <tfoot>
                        <tr class="bold">
                            <td>Total: </td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Healer && r.IsAlt == false).Count()</td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Healer && r.IsAlt == true).Count()</td>
                        </tr>
                    </tfoot>
                </table>
                <table class="table">
                    <thead class="not-sticky">
                        <tr>
                            <th class="bold">Tanks</th>
                            <th>Mains</th>
                            <th>Alts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var melee = Model.Where(r => r.Role == WowSpecRole.Melee)
                                                          .GroupBy(r => r.Class)
                                                          .OrderBy(group => group.Key)
                                                          .Select(group => new
                                                          {
                                                              WowClass = group.Key,
                                                              MainCount = group.Count(r => r.MainId == null),
                                                              AltCount = group.Count(r => r.MainId != null)
                                                          }); }
                        @foreach (var meleeClass in melee)
                        {
            <tr>
                <td class="@meleeClass.WowClass.ToString().ToWowClassCssClass()">@Html.DisplayFor(modelItem => meleeClass.WowClass)s</td>
                <td>@meleeClass.MainCount</td>
                <td>@meleeClass.AltCount</td>
            </tr>
}
                    </tbody>
                    <tfoot>
                        <tr class="bold">
                            <td>Total: </td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Melee && r.IsAlt == false).Count()</td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Melee && r.IsAlt == true).Count()</td>
                        </tr>
                    </tfoot>
                </table>
                <table class="table">
                    <thead class="not-sticky">
                        <tr>
                            <th class="bold">Tanks</th>
                            <th>Mains</th>
                            <th>Alts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var ranged = Model.Where(r => r.Role == WowSpecRole.Ranged)
                                                          .GroupBy(r => r.Class)
                                                          .OrderBy(group => group.Key)
                                                          .Select(group => new
                                                          {
                                                              WowClass = group.Key,
                                                              MainCount = group.Count(r => r.MainId == null),
                                                              AltCount = group.Count(r => r.MainId != null)
                                                          }); }
                        @foreach (var rangedClass in ranged)
                        {
            <tr>
                <td class="@rangedClass.WowClass.ToString().ToWowClassCssClass()">@Html.DisplayFor(modelItem => rangedClass.WowClass)s</td>
                <td>@rangedClass.MainCount</td>
                <td>@rangedClass.AltCount</td>
            </tr>}
                    </tbody>
                    <tfoot>
                        <tr class="bold">
                            <td>Total: </td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Ranged && r.IsAlt == false).Count()</td>
                            <td>@Model.Where(r => r.Role == WowSpecRole.Ranged && r.IsAlt == true).Count()</td>
                        </tr>
                    </tfoot>
                </table>
            </article>
            <article class="roster__class-graphs">
                <article class="class-graph__container">
                    <h3 class="class-graph__title">Mains (@Model.Where(r => r.IsAlt == false).Count())</h3>
                    <img class="class-graph__graph" src="~/images/Placeholder/classchart.jpg" alt="" />
                </article>
                <article class="class-graph__container">
                    <h3 class="class-graph__title">Alts (@Model.Where(r => r.IsAlt == true).Count())</h3>
                    <img class="class-graph__graph" src="~/images/Placeholder/classchart.jpg" alt="" />
                </article>
            </article>
        </article>
    </section>
</section>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@*<i wow-class="" wow-spec=""></i>*@