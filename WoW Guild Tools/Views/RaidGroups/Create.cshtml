@*@model WoW_Guild_Tools.Models.RaidGroup*@
@model WoW_Guild_Tools.Models.ViewModels.RosterCharactersViewModel

@{
    ViewData["Title"] = "Create Raid Setup";
}

<form class="raid-setups" asp-action="Create">
    <section class="raid-setups__container" asp-validation-summary="ModelOnly" class="text-danger">
        @*<input class="form-check-input" asp-for="Published" /> @Html.DisplayNameFor(model => model.Published)*@
        @*<label asp-for="LastUpdated" class="control-label"></label>
            <input asp-for="LastUpdated" class="form-control" />
            <span asp-validation-for="LastUpdated" class="text-danger"></span>*@
        <section class="roster-characters">
            <h2 class="roster-characters__title">Roster</h2>
            <section class="roster-characters__container">
                @if (Model.Mains != null)
                {
                    await Html.RenderPartialAsync("Roster/_RoleRaiders", Model.Mains);
                }

                @if (Model.Alts != null && (Model.Alts.Tanks.Raiders.Any() || Model.Alts.Healers.Raiders.Any() || Model.Alts.Melee.Raiders.Any() || Model.Alts.Ranged.Raiders.Any()))
                {
                    await Html.RenderPartialAsync("Roster/_RoleRaiders", Model.Alts);
                }
            </section>
        </section>
        <section class="raids">
            <h2 class="raids__title">Raids</h2>
            <section class="raids__container">
                <article class="raids__raidgroup">
                    <header class="raidgroup__header">
                        @*<label asp-for="Name" class="control-label"></label>
                            <input placeholder="Raid Group Name*" required asp-for="Name" class="form-control" />
                            <span asp-validation-for="Name" class="text-danger"></span>*@
                    </header>
                    <section class="raidgroup__groups">
                        @{ await Html.RenderPartialAsync("_SingleGroup");}
                        @*<aside class="raidgroup__options">
                                <a class="raidgroup__add-group button icon-button button--success" aria-label="Add group" asp-action="AddGroup">
                                </a>
                                <a class="raidgroup__remove-group button icon-button button--danger" aria-label="Remove group" asp-action="RemoveGroup">
                                </a>
                            </aside>*@
                    </section>
                    <section class="raidgroup__global-buffs">
                        @{ await Html.RenderPartialAsync("Buffs/_RaidBuffs");}
                    </section>
                    <section class="raidgroup__global-buffs">
                        @{ await Html.RenderPartialAsync("Buffs/_RaidDebuffs");}
                    </section>
                    @*<footer class="raidgroup__footer">
                            <a class="raidgroup__duplicate button button--success button--icon" asp-action="DuplicateRaid">
                                Duplicate raid
                            </a>
                            <a class="raidgroup__add button button--success button--icon" asp-action="AddRaid">
                                Add raid
                            </a>
                        </footer>*@
                </article>
            </section>
        </section>

        @*<button type="submit" asp-action="Create" class="button button--success button--icon">
            Publish setup
        </button>*@
    </section>
</form>

@*<a asp-action="Index">Back to List</a>*@


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        /* Class - Specs mapping -- currently unused*/
        /*
        function ClassSpec(Class, Specs = []) {
            this.Class = Class;
            this.Specs = Specs;
        }

        function ClassSpecsList(ClassSpecs) {
            this.ClassSpecs = ClassSpecs;
        };

        var classSpecsList = new ClassSpecsList(
            [
                new ClassSpec(
                    "druid",
                    [
                        "balance",
                        "feralcombat",
                        "restoration"
                    ]
                ),
                new ClassSpec(
                    "hunter",
                    [
                        "beastmastery",
                        "marksmanship",
                        "survival"
                    ]
                ),
                new ClassSpec(
                    "mage",
                    [
                        "arcane",
                        "fire",
                        "frost"
                    ]
                ),
                new ClassSpec(
                    "paladin",
                    [
                        "holy",
                        "protection",
                        "retribution"
                    ]
                ),
                new ClassSpec(
                    "priest",
                    [
                        "discipline",
                        "holy",
                        "shadow"
                    ]
                ),
                new ClassSpec(
                    "rogue",
                    [
                        "assassination",
                        "combat",
                        "subtlety"
                    ]
                ),
                new ClassSpec(
                    "shaman",
                    [
                        "elemental",
                        "enhancement",
                        "restoration"
                    ]
                ),
                new ClassSpec(
                    "warlock",
                    [
                        "affliction",
                        "demonology",
                        "destruction"
                    ]
                ),
                new ClassSpec(
                    "warrior",
                    [
                        "arms",
                        "fury",
                        "protection"
                    ]
                )
            ]
        )*/


        // Initialize SortableJS on required elements
        let roleContainers = document.getElementsByClassName("role__inner-container");

        for (let i = 0; i < roleContainers.length; i++) {
            new Sortable(roleContainers[i], {
                animation: 150,
                sort: false,
                /*removeOnSpill: true, // Enable plugin*/
                group: {
                    put: false,
                    name: 'raider',
                    pull: 'clone',
                }
                /*ghostClass: 'blue-background-class'*/
            });
        }

        let groupsInRaids = document.getElementsByClassName('raidgroup__slots');

        for (let i = 0; i < groupsInRaids.length; i++) {
            new Sortable(groupsInRaids[i], {
                animation: 150,
                removeOnSpill: true, // Enable plugin
                group: {
                    /*put: ['raider', 'raidgroup'],*/
                    name: 'raidgroup',
                    put: function (to, from, item) {
                        let shouldInsert = false;
                        let raiderCloneName = getRaiderName(item);

                        // Is raider already in raid?
                        if (to.el.children.length + 1 <= 5) { // length starts at 0
                            if (!checkIfRaiderInArray(raiderCloneName)) {
                                shouldInsert = true;
                            }
                            else {
                                // Raider was in the raid, but are we moving it between groups in the raid?
                                if (from.el.classList.contains('raidgroup__slots')) {
                                    shouldInsert = true;
                                }
                            }
                        }
                        //else {
                        //    alert('more than 5 raiders in group!');
                        //}
                        // all our checks were true - but we also need to check if it's in the correct sortable group
                        // i wasn't able to find a way to do this check earlier
                        return shouldInsert && ['raider', 'raidgroup'];
                    },
                    /*pull: 'swap'*/
                },
                onAdd: function (evt) {
                    let raiderName = getRaiderName(evt.item);
                    let wowClass = evt.item.dataset.wowClass;
                    let wowSpec = evt.item.dataset.wowSpec;

                    addRaiderToActiveRaidersJSON(raiderName, wowClass, wowSpec);
                    updateRaidBuffs();
                },
                onSpill: function (evt) {
                    let raiderName = getRaiderName(evt.item);
                    console.log('Start of spill... ', evt);
                    removeRaiderFromActiveRaidersJSON(raiderName);
                    updateRaidBuffs();
                    console.log('end of spill');
                }
            });
        }

        let raidersInRaid = {
            "raiders": [
            ],
        };

        function getRaiderName(el) {
            let raiderName = el.dataset.mainName;

            if (raiderName === undefined) {
                raiderName = el.querySelector('span.raider__name').innerHTML;
            }

            return raiderName;
        }

        function checkIfRaiderInArray(raiderName) {
            let raiderInArray = false;

            for (let i = raidersInRaid.raiders.length - 1; i >= 0; i--) {
                if (raidersInRaid.raiders[i].name === raiderName) {
                    raiderInArray = true;
                    break;
                }
            }

            return raiderInArray;
        }

        function addRaiderToActiveRaidersJSON(raiderName, raiderClass, raiderSpec) {
            let raiderAdded = false;

            if (!checkIfRaiderInArray(raiderName)) {
                raidersInRaid.raiders.push(
                    {
                        "name": raiderName,
                        "wowClass": raiderClass,
                        "wowSpec": raiderSpec
                    }
                )

                raiderAdded = true;
            }

            return raiderAdded;
        }

        function removeRaiderFromActiveRaidersJSON(raiderName) {
            /*console.log(raiderName);*/
            let raiderRemoved = false;
            for (let i = raidersInRaid.raiders.length - 1; i >= 0; i--) {
                if (raidersInRaid.raiders[i].name === raiderName) {
                    raidersInRaid.raiders.splice(i, 1);
                    raiderRemoved = true;
                    break;
                }
            }

            return raiderRemoved;
        }

        function checkIfClassInArray(wowClass) {
            let classInArray = false;

            for (let i = raidersInRaid.raiders.length - 1; i >= 0; i--) {
                if (raidersInRaid.raiders[i].wowClass === wowClass) {
                    classInArray = true;
                    break;
                }
            }

            return classInArray;
        }

        function checkIfClassSpecInArray(wowClass, wowSpec) {
            let classSpecInArray = false;

            for (let i = raidersInRaid.raiders.length - 1; i >= 0; i--) {
                let raider = raidersInRaid.raiders[i];

                if (raider.wowClass === wowClass && raider.wowSpec === wowSpec) {
                    classSpecInArray = true;
                    break;
                }
            }

            return classSpecInArray;
        }

        function checkIfGroupHasDraenei(group) {
            let groupHasDraenei = false;
            let groupRaiders = group.querySelectorAll('.role__raider');

            for (var i = 0; i < groupRaiders.length; i++) {
                if (groupRaiders[i].getAttribute('data-wow-race') == 'draenei') {
                    groupHasDraenei = true;
                    //break; //No reason to continue checking if we found a dranei in the group
                }
            }

            return groupHasDraenei;
        }

        const classBuffs = document.querySelectorAll('img[data-wow-class]:not([data-wow-spec]');
        const classSpecBuffs = document.querySelectorAll('img[data-wow-class][data-wow-spec]');

        function updateRaidBuffs() {
            let raidgroupGroups = document.querySelectorAll('.raidgroup__group');
            for (let i = 0; i < raidgroupGroups.length; i++) {
                if (checkIfGroupHasDraenei(raidgroupGroups[i])) {
                    console.log('enable icon');
                    raidgroupGroups[i].querySelector('.raidgroup__draenei-icon').classList.remove('raidgroup__draenei-icon--disabled');
                } else {
                    console.log('disable icon');
                    raidgroupGroups[i].querySelector('.raidgroup__draenei-icon').classList.add('raidgroup__draenei-icon--disabled');
                }
            }

            for (let i = 0; i < classSpecBuffs.length; i++) {
                let el = classSpecBuffs[i];

                // Check that element has the correct class AND spec (some classes have the same spec names)
                if (checkIfClassSpecInArray(el.dataset.wowClass, el.dataset.wowSpec)) {
                    el.classList.remove('global-buffs--disabled');
                } else {
                    el.classList.add('global-buffs--disabled');
                }
            }

            for (let i = 0; i < classBuffs.length; i++) {
                let el = classBuffs[i];

                if (checkIfClassInArray(el.dataset.wowClass)) {
                    el.classList.remove('global-buffs--disabled');
                } else {
                    el.classList.add('global-buffs--disabled');
                }
            }
        }

        jQuery('#raidGroupDateTimePicker').datetimepicker({
            /*inline: true,*/
            format: 'd/m/Y',
            minDate: 0, // today
            theme: 'dark',
            timepicker: false,
            dayOfWeekStart: 1,
        });
    </script>
}
